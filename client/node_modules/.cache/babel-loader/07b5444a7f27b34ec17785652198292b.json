{"ast":null,"code":"import React__default, { useState, useRef, createRef, createElement } from 'react';\nvar styles = {\n  \"container\": \"_2EYYE\",\n  \"inner\": \"_3x3X6\",\n  \"answer\": \"_1gKL9\",\n  \"answer_hover\": \"_28NA5\",\n  \"answerContainer\": \"_wMDGK\"\n};\n\nfunction manageVote(results, item, index, refs) {\n  item.votes++;\n  countPercentage(results);\n  animateAnswers(index, results, refs);\n}\n\nfunction animateAnswers(index, results, refs) {\n  var answer = refs[index].current;\n  var oppositeIndex = index === 0 ? 1 : 0;\n  var anotherAnswer = refs[oppositeIndex].current;\n  var percentage = results[index].percentage;\n\n  if (answer && anotherAnswer && percentage) {\n    answer.animate([{\n      width: '50%',\n      easing: 'ease-out'\n    }, {\n      width: percentage + \"%\",\n      easing: 'ease-out'\n    }], 500);\n    anotherAnswer.animate([{\n      width: '50%',\n      easing: 'ease-out'\n    }, {\n      width: 100 - percentage + \"%\",\n      easing: 'ease-out'\n    }], 500);\n    answer.style.width = percentage + \"%\";\n    anotherAnswer.style.width = 100 - percentage + \"%\";\n    answer.animate([{\n      backgroundColor: 'white'\n    }, {\n      backgroundColor: '#efefef'\n    }], 200);\n    answer.style.backgroundColor = '#EFEFEF';\n    var height = answer.offsetHeight;\n    answer.style.padding = '0';\n    anotherAnswer.style.padding = '0';\n    answer.classList.remove(styles.answer_hover);\n    anotherAnswer.classList.remove(styles.answer_hover);\n    var inner = refs[0].current;\n    if (inner) inner.style.height = height + \"px\";\n  }\n}\n\nfunction countPercentage(results) {\n  var sum = results[0].votes + results[1].votes;\n  results[0].percentage = Math.round(results[0].votes / sum * 100);\n  results[1].percentage = Math.round(results[1].votes / sum * 100);\n}\n\nvar BinaryPoll = function BinaryPoll(_ref) {\n  var question = _ref.question,\n      results = _ref.results,\n      theme = _ref.theme,\n      onVote = _ref.onVote;\n\n  var _useState = useState(false),\n      voted = _useState[0],\n      setVoted = _useState[1];\n\n  var answersContainer = useRef(null);\n  var answer0 = useRef(null);\n  var answer1 = useRef(null);\n  var allRefs = [answer0, answer1, answersContainer];\n  return React__default.createElement(\"article\", {\n    className: styles.container,\n    style: {\n      alignItems: theme === null || theme === void 0 ? void 0 : theme.alignment\n    }\n  }, question && React__default.createElement(\"h1\", {\n    style: {\n      color: theme === null || theme === void 0 ? void 0 : theme.textColor\n    }\n  }, question), React__default.createElement(\"div\", {\n    ref: answersContainer,\n    className: styles.inner,\n    style: {\n      backgroundColor: theme === null || theme === void 0 ? void 0 : theme.backgroundColor\n    }\n  }, React__default.createElement(\"div\", {\n    ref: answer0,\n    role: 'button',\n    className: styles.answer_hover + ' ' + styles.answer,\n    id: 'binAnswer0',\n    onClick: function onClick() {\n      if (!voted) {\n        setVoted(true);\n        manageVote(results, results[0], 0, allRefs);\n        onVote === null || onVote === void 0 ? void 0 : onVote(results[0], results);\n      }\n    }\n  }, React__default.createElement(\"div\", {\n    className: styles.answerContainer\n  }, React__default.createElement(\"p\", {\n    style: {\n      color: theme === null || theme === void 0 ? void 0 : theme.leftColor\n    }\n  }, results[0].text), voted && React__default.createElement(\"span\", {\n    style: {\n      color: theme === null || theme === void 0 ? void 0 : theme.textColor\n    }\n  }, results[0].percentage, \"%\"))), React__default.createElement(\"div\", {\n    ref: answer1,\n    role: 'button',\n    className: styles.answer_hover + ' ' + styles.answer,\n    id: 'binAnswer1',\n    onClick: function onClick() {\n      if (!voted) {\n        setVoted(true);\n        manageVote(results, results[1], 1, allRefs);\n        onVote === null || onVote === void 0 ? void 0 : onVote(results[1], results);\n      }\n    }\n  }, React__default.createElement(\"div\", {\n    className: styles.answerContainer\n  }, React__default.createElement(\"p\", {\n    style: {\n      color: theme === null || theme === void 0 ? void 0 : theme.rightColor\n    }\n  }, results[1].text), voted && React__default.createElement(\"span\", {\n    style: {\n      color: theme === null || theme === void 0 ? void 0 : theme.textColor\n    }\n  }, results[1].percentage, \"%\")))));\n};\n\nvar styles$1 = {\n  \"container\": \"_1xGEd\",\n  \"answer\": \"_3gEzx\",\n  \"answer_hover\": \"_cCkxB\",\n  \"answerInner\": \"_is6ww\"\n};\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction manageVote$1(results, item, index, refs, theme) {\n  item.votes++;\n  countPercentage$1(results);\n  animateAnswers$1(index, results, refs, theme);\n}\n\nfunction animateAnswers$1(index, results, refs, theme) {\n  var answers = [];\n  var restOfAnswersIndexes = [];\n\n  for (var i = 0; i < results.length; i++) {\n    if (i !== index) restOfAnswersIndexes.push(i);\n    var answerBuffer = refs.current[i].current;\n    answerBuffer && answers.push(answerBuffer);\n  }\n\n  answers[index].animate([{\n    width: 0,\n    easing: 'ease-out',\n    backgroundColor: 'white'\n  }, {\n    width: results[index].percentage + \"%\",\n    easing: 'ease-out',\n    backgroundColor: \"\" + (theme === null || theme === void 0 ? void 0 : theme.mainColor)\n  }], 500);\n  answers[index].style.width = results[index].percentage + \"%\";\n  if (theme !== null && theme !== void 0 && theme.mainColor) answers[index].style.backgroundColor = theme === null || theme === void 0 ? void 0 : theme.mainColor;\n\n  for (var _i = 0, _restOfAnswersIndexes = restOfAnswersIndexes; _i < _restOfAnswersIndexes.length; _i++) {\n    var _i2 = _restOfAnswersIndexes[_i];\n\n    answers[_i2].animate([{\n      width: 0,\n      easing: 'ease-out',\n      backgroundColor: 'white'\n    }, {\n      width: results[_i2].percentage + \"%\",\n      easing: 'ease-out',\n      backgroundColor: '#efefef'\n    }], 500);\n\n    answers[_i2].style.width = results[_i2].percentage + \"%\";\n    answers[_i2].style.backgroundColor = '#efefef';\n  }\n}\n\nfunction countPercentage$1(results) {\n  var votes = [];\n  var sum = 0;\n\n  for (var _iterator = _createForOfIteratorHelperLoose(results), _step; !(_step = _iterator()).done;) {\n    var result = _step.value;\n    votes.push(result.votes);\n    sum += result.votes;\n  }\n\n  for (var i = 0; i < votes.length; i++) {\n    results[i].percentage = Math.floor(votes[i] / sum * 100);\n  }\n}\n\nvar MultiplePoll = function MultiplePoll(_ref) {\n  var question = _ref.question,\n      results = _ref.results,\n      theme = _ref.theme,\n      onVote = _ref.onVote;\n\n  var _useState = useState(false),\n      voted = _useState[0],\n      setVoted = _useState[1];\n\n  var answerRefs = useRef(results.map(function () {\n    return createRef();\n  }));\n  return React__default.createElement(\"article\", {\n    className: styles$1.container,\n    style: {\n      alignItems: theme === null || theme === void 0 ? void 0 : theme.alignment\n    }\n  }, question && React__default.createElement(\"h1\", {\n    style: {\n      color: theme === null || theme === void 0 ? void 0 : theme.textColor\n    }\n  }, question), results.map(function (result, index) {\n    return React__default.createElement(\"div\", {\n      key: index,\n      role: 'button',\n      id: 'mulAnswer' + index,\n      className: voted ? styles$1.answer : styles$1.answer_hover + ' ' + styles$1.answer,\n      style: {\n        backgroundColor: theme === null || theme === void 0 ? void 0 : theme.backgroundColor\n      },\n      onClick: function onClick() {\n        if (!voted) {\n          setVoted(true);\n          manageVote$1(results, result, index, answerRefs, theme);\n          onVote === null || onVote === void 0 ? void 0 : onVote(result, results);\n        }\n      }\n    }, React__default.createElement(\"div\", {\n      ref: answerRefs.current[index],\n      className: styles$1.answerInner\n    }, React__default.createElement(\"p\", {\n      style: {\n        color: theme === null || theme === void 0 ? void 0 : theme.textColor\n      }\n    }, result.text)), voted && React__default.createElement(\"span\", {\n      style: {\n        color: theme === null || theme === void 0 ? void 0 : theme.textColor\n      }\n    }, result.percentage, \"%\"));\n  }));\n};\n\nvar LeafPoll = function LeafPoll(_ref) {\n  var type = _ref.type,\n      question = _ref.question,\n      results = _ref.results,\n      theme = _ref.theme,\n      onVote = _ref.onVote;\n  return type === 'binary' ? createElement(BinaryPoll, {\n    question: question,\n    results: results,\n    theme: theme,\n    onVote: onVote\n  }) : createElement(MultiplePoll, {\n    question: question,\n    results: results,\n    theme: theme,\n    onVote: onVote\n  });\n};\n\nexport { LeafPoll };","map":null,"metadata":{},"sourceType":"module"}